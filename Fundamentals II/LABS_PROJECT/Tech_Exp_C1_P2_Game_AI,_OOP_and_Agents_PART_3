{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Tech Exp C1 P2.1 Game AI, It's a Bug!!!","provenance":[{"file_id":"1Smkoeb0ymRN-pu6AeQDln9CY2zKEQvCs","timestamp":1609810521206},{"file_id":"1LhbPBgNy-AA8tss0TDETxPFxtB2nN2Sw","timestamp":1606866261224},{"file_id":"1Idd3POhDAlJZ_1IzFYTzT_IdsKPLg0fk","timestamp":1606780207676}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python (tunnel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"cells":[{"cell_type":"markdown","metadata":{"id":"vhe1yX4AMckE"},"source":["# TF Course 1, Project Part 2.3: Heuristical Agents\n","\n","**Instructor**: Wesley Beckner\n","\n","**Contact**: wesleybeckner@gmail.com\n","\n","<br>\n","\n","---\n","\n","<br>\n","\n","Let's lay the foundation for our projects\n","\n","<br>\n","\n","---\n","\n","<br>\n","\n","<a name='top'></a>\n","\n","# Contents\n","  \n","\n","<br>\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"mNtJitcRW51Y"},"source":["<a name='x.0'></a>\n","\n","## 4.0 Preparing Environment and Importing Data\n","\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"chdcBoBL8SNm"},"source":["<a name='x.0.1'></a>\n","\n","### 4.0.1 Import Packages\n","\n","[back to top](#top)"]},{"cell_type":"code","metadata":{"id":"eJ7-FDq3JhhI","executionInfo":{"status":"ok","timestamp":1626998076777,"user_tz":420,"elapsed":552,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}}},"source":["import random\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","class TicTacToe:\n","  # can preset winner and starting player\n","  def __init__(self, winner='', start_player=''): \n","    self.winner = winner\n","    self.start_player = start_player\n","    self.board = {1: ' ',\n","         2: ' ',\n","         3: ' ',\n","         4: ' ',\n","         5: ' ',\n","         6: ' ',\n","         7: ' ',\n","         8: ' ',\n","         9: ' ',}\n","    self.win_patterns = [[1,2,3], [4,5,6], [7,8,9],\n","                [1,4,7], [2,5,8], [3,6,9],\n","                [1,5,9], [7,5,3]]\n","         \n","  # the other functions are now passed self\n","  def visualize_board(self):\n","    print(\n","      \"|{}|{}|{}|\\n|{}|{}|{}|\\n|{}|{}|{}|\\n\".format(*self.board.values())\n","      )\n","\n","  def check_winning(self):\n","    for pattern in self.win_patterns:\n","      values = [self.board[i] for i in pattern] \n","      if values == ['X', 'X', 'X']:\n","        self.winner = 'X' # we update the winner status\n","        return \"'X' Won!\"\n","      elif values == ['O', 'O', 'O']:\n","        self.winner = 'O'\n","        return \"'O' Won!\"\n","    return ''\n","\n","  def check_stalemate(self):\n","    if ' ' not in self.board.values():\n","      self.winner = 'Stalemate'\n","      return \"It's a stalemate!\"\n","\n","class GameEngine(TicTacToe):\n","  def __init__(self, setup='auto'):\n","    super().__init__()\n","    self.setup = setup\n","\n","  def setup_game(self):\n","\n","    if self.setup == 'user':\n","      players = int(input(\"How many Players? (type 0, 1, or 2)\"))\n","      self.player_meta = {'first': {'label': 'X',\n","                                    'type': 'ai'}, \n","                    'second': {'label': 'O',\n","                                    'type': 'human'}}\n","      if players == 1:\n","        first = input(\"who will go first? (X, (AI), or O (Player))\")\n","        if first == 'O':\n","          self.player_meta = {'second': {'label': 'X',\n","                                    'type': 'ai'}, \n","                        'first': {'label': 'O',\n","                                    'type': 'human'}}\n","        else:\n","          self.player_meta = {'first': {'label': 'X',\n","                                    'type': 'ai'}, \n","                        'second': {'label': 'O',\n","                                    'type': 'human'}}\n","\n","      elif players == 0:\n","        first = random.choice(['X', 'O'])\n","        if first == 'O':\n","          self.player_meta = {'second': {'label': 'X',\n","                                    'type': 'ai'}, \n","                        'first': {'label': 'O',\n","                                    'type': 'ai'}}                                \n","        else:\n","          self.player_meta = {'first': {'label': 'X',\n","                                    'type': 'ai'}, \n","                        'second': {'label': 'O',\n","                                    'type': 'ai'}}\n","\n","    elif self.setup == 'auto':\n","      first = random.choice(['X', 'O'])\n","      if first == 'O':\n","        self.start_player = 'O'\n","        self.player_meta = {'second': {'label': 'X',\n","                                  'type': 'ai'}, \n","                      'first': {'label': 'O',\n","                                  'type': 'ai'}}                                \n","      else:\n","        self.start_player = 'X'\n","        self.player_meta = {'first': {'label': 'X',\n","                                  'type': 'ai'}, \n","                      'second': {'label': 'O',\n","                                  'type': 'ai'}}\n","\n","  def play_game(self):\n","    while True:\n","      for player in ['first', 'second']:  \n","        self.visualize_board()\n","        player_label = self.player_meta[player]['label']\n","        player_type = self.player_meta[player]['type']\n","\n","        if player_type == 'human':\n","          move = input(\"{}, what's your move?\".format(player_label))\n","          # we're going to allow the user to quit the game from the input line\n","          if move in ['q', 'quit']:\n","            self.winner = 'F'\n","            print('quiting the game')\n","            break\n","\n","          move = int(move)\n","          if self.board[move] != ' ':\n","            while True:\n","              move = input(\"{}, that position is already taken! \"\\\n","                          \"What's your move?\".format(player))  \n","              move = int(move)            \n","              if self.board[move] != ' ':\n","                continue\n","              else:\n","                break\n","\n","        else:\n","          while True:\n","            move = random.randint(1,9)\n","            if self.board[move] != ' ':\n","              continue\n","              print('test')\n","            else:\n","              break\n","\n","        self.board[move] = player_label\n","\n","        # the winner varaible will now be check within the board object\n","        self.check_winning()\n","        self.check_stalemate()\n","\n","        if self.winner == '':\n","          continue\n","\n","        elif self.winner == 'Stalemate':\n","          print(self.check_stalemate())\n","          self.visualize_board()\n","          break\n","\n","        else:\n","          print(self.check_winning())\n","          self.visualize_board()\n","          break\n","      if self.winner != '':\n","        return self"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"R7vDY-8U8SWd"},"source":["<a name='x.0.1'></a>\n","\n","### 4.0.2 Load Dataset\n","\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"h1YRk95hvZcH"},"source":["## 4.1 It's a Bug!\n","\n","Your friend is developing this tictactoe game in python, and they notice something peculiar; the game engine doesn't correctly identify a winning move if it's the last game square to be played, rather, it counts it as a tie! Help your friend debug their code!"]},{"cell_type":"markdown","metadata":{"id":"5bdJg-2pssAn"},"source":["### 4.1.1 Make the error repeatable"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tSj1fiBAp2oN","executionInfo":{"status":"ok","timestamp":1626998363355,"user_tz":420,"elapsed":146,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"58c91e7c-244b-4731-f50a-0e5ede4645e8"},"source":["random.seed(12) #here to make this operate in the same way everytime\n","game = GameEngine(setup='auto')\n","game.setup_game()\n","game.play_game()"],"execution_count":64,"outputs":[{"output_type":"stream","text":["| | | |\n","| | | |\n","| | | |\n","\n","| | | |\n","| |O| |\n","| | | |\n","\n","| | | |\n","| |O| |\n","| | |X|\n","\n","| | | |\n","| |O|O|\n","| | |X|\n","\n","| | |X|\n","| |O|O|\n","| | |X|\n","\n","| | |X|\n","| |O|O|\n","|O| |X|\n","\n","|X| |X|\n","| |O|O|\n","|O| |X|\n","\n","|X| |X|\n","| |O|O|\n","|O|O|X|\n","\n","|X| |X|\n","|X|O|O|\n","|O|O|X|\n","\n","It's a stalemate!\n","|X|O|X|\n","|X|O|O|\n","|O|O|X|\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<__main__.GameEngine at 0x7fecf3833590>"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"7cu_oGLOBQTT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624583115655,"user_tz":300,"elapsed":137,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"f80a55d8-bee6-4c5e-ee57-4a475e02c25e"},"source":["# use random.seed(1) here to make this operate in the same way everytime\n","game = GameEngine(setup='auto')\n","game.setup_game()\n","game.play_game()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["| | | |\n","| | | |\n","| | | |\n","\n","| | | |\n","| |O| |\n","| | | |\n","\n","| | | |\n","| |O| |\n","| | |X|\n","\n","| | | |\n","| |O|O|\n","| | |X|\n","\n","| | |X|\n","| |O|O|\n","| | |X|\n","\n","| | |X|\n","| |O|O|\n","|O| |X|\n","\n","|X| |X|\n","| |O|O|\n","|O| |X|\n","\n","|X| |X|\n","| |O|O|\n","|O|O|X|\n","\n","|X| |X|\n","|X|O|O|\n","|O|O|X|\n","\n","It's a stalemate!\n","|X|O|X|\n","|X|O|O|\n","|O|O|X|\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<__main__.GameEngine at 0x7ff5a010e6d0>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"Ee8gu3oU6Kqn","executionInfo":{"status":"ok","timestamp":1626998413726,"user_tz":420,"elapsed":169,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"9e273102-d95f-4574-aaf5-424c08b52128"},"source":["game.winner"],"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'O'"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"id":"DDgrKuKk7szs","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1626998386692,"user_tz":420,"elapsed":167,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"eda8bd0f-944d-49cb-c2e3-7dc1199509d0"},"source":["game.check_stalemate()"],"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"It's a stalemate!\""]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"wlU_C39Ds72S","executionInfo":{"status":"ok","timestamp":1626998389171,"user_tz":420,"elapsed":161,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"ab0d4ea2-0e40-4af1-b364-0eddd95bbe04"},"source":["game.check_winning()"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"'O' Won!\""]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"1fALzz1ws9xv","executionInfo":{"status":"ok","timestamp":1626998394152,"user_tz":420,"elapsed":168,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"6fd9ec48-0fd1-4073-b395-f81ff3d7e241"},"source":["game.winner"],"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'O'"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"JGWuLsHXc3l2"},"source":["############################################################\n","### COPY ALL OF THE FIRST CELL HERE AND MAKE YOUR EDITS ####\n","############################################################"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bKDmNKjatROp","executionInfo":{"status":"ok","timestamp":1624583296778,"user_tz":300,"elapsed":171,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"2cfe3cb2-cfe8-4ff8-c623-89bf10b32163"},"source":["random.seed(12)\n","game = GameEngine(setup='auto')\n","game.setup_game()\n","game.play_game()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["| | | |\n","| | | |\n","| | | |\n","\n","| | | |\n","| |O| |\n","| | | |\n","\n","| | | |\n","| |O| |\n","| | |X|\n","\n","| | | |\n","| |O|O|\n","| | |X|\n","\n","| | |X|\n","| |O|O|\n","| | |X|\n","\n","| | |X|\n","| |O|O|\n","|O| |X|\n","\n","|X| |X|\n","| |O|O|\n","|O| |X|\n","\n","|X| |X|\n","| |O|O|\n","|O|O|X|\n","\n","|X| |X|\n","|X|O|O|\n","|O|O|X|\n","\n","'O' Won!\n","|X|O|X|\n","|X|O|O|\n","|O|O|X|\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<__main__.GameEngine at 0x7ff59a34d910>"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"qXRO9Mb5tX_d"},"source":[""],"execution_count":null,"outputs":[]}]}