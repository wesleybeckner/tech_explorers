{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SOLUTION Tech Exp C1 P2 Game AI, OOP and Agents PART 1","provenance":[{"file_id":"1Smkoeb0ymRN-pu6AeQDln9CY2zKEQvCs","timestamp":1609810521206},{"file_id":"1LhbPBgNy-AA8tss0TDETxPFxtB2nN2Sw","timestamp":1606866261224},{"file_id":"1Idd3POhDAlJZ_1IzFYTzT_IdsKPLg0fk","timestamp":1606780207676}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python (tunnel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"cells":[{"cell_type":"markdown","metadata":{"id":"vhe1yX4AMckE"},"source":["# TF Course 1, Project Part 2: Building Agents and Object Oriented Programming\n","\n","**Instructor**: Wesley Beckner\n","\n","**Contact**: wesleybeckner@gmail.com\n","\n","<br>\n","\n","---\n","\n","<br>\n","\n","In part II of our tic-tac-toe and AI journey, we're going to take all the functions we've defined so far and make them object oriented!\n","\n","<br>\n","\n","---\n","\n","<br>\n","\n","<a name='top'></a>\n","  "]},{"cell_type":"markdown","metadata":{"id":"mNtJitcRW51Y"},"source":["<a name='x.0'></a>\n","\n","## 2.0 Preparing Environment and Importing Data\n","\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"chdcBoBL8SNm"},"source":["<a name='x.0.1'></a>\n","\n","### 2.0.1 Import Packages\n","\n","[back to top](#top)"]},{"cell_type":"code","metadata":{"id":"eJ7-FDq3JhhI"},"source":["def visualize_board(board_values):\n","  \"\"\"\n","  Visualizes the board during gameplay\n","\n","  Parameters\n","  ----------\n","  board_values : list\n","    The values ('X', 'O', or ' ' at each board location)\n","\n","  Returns\n","  -------\n","  None\n","\n","  \"\"\"\n","  print(\n","    \"|{}|{}|{}|\\n|{}|{}|{}|\\n|{}|{}|{}|\\n\".format(*board_values)\n","    )\n","  \n","def init_board():\n","  \"\"\"\n","  Initializes an empty board for the start of gameplay\n","\n","  Parameters\n","  ----------\n","  None\n","\n","  Returns\n","  -------\n","  board : dict\n","    a dictionary with keys 1-9 and single space (' ') string as values\n","  \"\"\"\n","  return {1: ' ',\n","         2: ' ',\n","         3: ' ',\n","         4: ' ',\n","         5: ' ',\n","         6: ' ',\n","         7: ' ',\n","         8: ' ',\n","         9: ' ',}\n","\n","# the keys on the game board where, if filled completely with X's or O's a \n","# winner has occurred \n","win_patterns = [[1,2,3], [4,5,6], [7,8,9],\n","                [1,4,7], [2,5,8], [3,6,9],\n","                [1,5,9], [7,5,3]]\n","                \n","def check_winning(board):\n","  \"\"\"\n","  Checks if the game has a winner\n","\n","  Parameters\n","  ----------\n","  board : dict\n","    the tictactoe board as a dictionary\n","\n","  Returns\n","  -------\n","  win_statement : str\n","    defaults to an empty string if no winner. Otherwise 'X' Won! or 'O' Won!\n","  \"\"\"\n","  for pattern in win_patterns:\n","    values = [board[i] for i in pattern] \n","    if values == ['X', 'X', 'X']:\n","      return \"'X' Won!\"\n","    elif values == ['O', 'O', 'O']:\n","      return \"'O' Won!\"\n","\n","  return ''\n","\n","def tic_tac_toe():\n","  \"\"\"\n","  The tictactoe game engine. Runs the while loop that handles the game\n","\n","  Parameters\n","  ----------\n","  None\n","\n","  Returns\n","  -------\n","  None\n","  \"\"\"\n","  print(\"'X' will go first!\")\n","  board = init_board()\n","  while True:\n","    for player in (['X', 'O']):  \n","      visualize_board(board.values())\n","      move = int(input(\"{}, what's your move?\".format(player)))\n","      if board[move] != ' ':\n","        move = input(\"{}, that position is already taken! \"\\\n","                    \"What's your move?\".format(player))\n","      else:\n","        board[move] = player\n","      winner = check_winning(board)\n","      if winner == '':\n","        continue\n","      else:\n","        print(winner)\n","        break\n","    if winner != '':\n","      break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wlj85iTSIwji"},"source":["<a name='x.1'></a>\n","\n","## 2.1 OOP\n","\n","[back to top](#top)\n","\n","Notice how we have so many functions with calls to our main object `board`. Let's try to organize this into a more object oriented scheme.\n","\n","We'll also want to write a function that recognizes when a stalemate has been reached!"]},{"cell_type":"markdown","metadata":{"id":"L0WIvZn-6FLn"},"source":["### 2.1.1 Thinking in Objects\n","\n","It's helpful to think of how our code can be divided into useful segments that can then be extended, interfaced, used elsewhere, etc.\n","\n","It's just like we had when we were playing with our pokeball and pokemon objects. In that case, it made sense to make two separate objects one for pokemon and one for pokeballs.\n","\n","Can you think of any way that would make sense to divide our code into objects? I can think of two."]},{"cell_type":"markdown","metadata":{"id":"oEX2A9Q17Jcv"},"source":["### 2.1.2 class TicTacToe\n","\n","the first object will be one that handles our board and all of its methods and attributes. In this class called `TicTacToe` we will have the attributes:\n","  * `winner`, initialized as an empty string, and updates at the conclusion of a game with 'X', 'O', or 'Stalemate'\n","  * `start_player` initialized as an empty string and updates at the start of a game with 'X' or 'O'\n","  * `board` initialized as our empty board dictionary\n","  * `win_patterns` the list of lists containing the winning patterns of the game\n","\n","and then we will have three different methods, each of which takes one parameter, `self`\n","\n","* `visualize_board`\n","* `check_winning`\n","* `check_stalemate` : a new function. Returns \"It's a stalemate!\" and sets `self.winner = \"Stalemate\"` (note there is a bug in the way this is currently written, we will move along for now and work through a debugging tutorial later this week!)"]},{"cell_type":"markdown","metadata":{"id":"AU78nqEm9QWS"},"source":["#### Q1 Attributes of TicTacToe\n","\n","Within class TicTacToe, define the attributes described above"]},{"cell_type":"code","metadata":{"id":"zANQ5gabHW4n"},"source":["class TicTacToe:\n","  # create winner and start_player parameters with default values as empty \n","  # strings within __init__\n","  def __init__(self):\n","    ##################################\n","    ########### Attributes ###########\n","    ##################################\n","    # set self.winner and self.start_player with the parameters from __init__\n","\n","    # set self.board as a dictionary with ' ' as values and 1-9 as keys\n"," \n","    # set self.win_patterns with the 8 winning patterns (a list of lists)\n","         "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f54j_ecJ-Wy0"},"source":["#### Q2 Methods of TicTacToe\n","\n","Here now we will define the methods of `TicTacToe`. Paste your attributes from the above cell, into the bellow cell so that your changes carry over."]},{"cell_type":"code","metadata":{"id":"-9jxKu8a-dNc"},"source":["class TicTacToe:\n","  # create winner and start_player parameters with default values as empty \n","  # strings within __init__\n","  def __init__(self):\n","  ##################################\n","  ########### Attributes ###########\n","  ##################################\n","    # set self.winner and self.start_player with the parameters from __init__\n","\n","    # set self.board as a dictionary with ' ' as values and 1-9 as keys\n"," \n","    # set self.win_patterns with the 8 winning patterns (a list of lists)\n","\n","  ###############################\n","  ########### METHODS ###########\n","  ###############################    \n","\n","  # the other functions are now passed self\n","\n","  # define visualize_board and update all internal calls to the board\n","  # object with self.board (and maybe self.board.values() depending on how your\n","  # visualize_board function is written)\n","\n","  # define check_winning and similarly update all calls to win_patterns,\n","  # board, and winner to be accessed via the self. Be sure to update the \n","  # attribute self.winner with the appropriate winner in the function\n","\n","  # here the definition of check_stalemate is given\n","  def check_stalemate(self):\n","    if ' ' not in self.board.values():\n","      self.winner = 'Stalemate'\n","      return \"It's a stalemate!\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rFTg_uZdBjqC"},"source":["### 2.1.3 The Game Engine (just a function for now)\n","\n","Next we'll create a function that runs game play using TicTacToe as an object that it passes around. I've already done the heavy lifting of replacing references to attributes (board, win_patterns) and methods (visualize_board, check_winning) to pass through the `TicTacToe` object. I also added the option for the user to quit the game by typing in `'q'` to the input line if they would like."]},{"cell_type":"markdown","metadata":{"id":"YY_uRNWxCjTd"},"source":["#### Q3 Add Condition for Stalemate"]},{"cell_type":"code","metadata":{"id":"hX_AgjhgM190"},"source":["def play_game():\n","  print(\"'X' will go first!\")\n","  tic_tac_toe = TicTacToe()\n","  while True:\n","    for player in (['X', 'O']):  \n","      tic_tac_toe.visualize_board()\n","      move = input(\"{}, what's your move?\".format(player))\n","\n","      ####################################################################\n","      # we're going to allow the user to quit the game from the input line\n","      ####################################################################\n","      if move in ['q', 'quit']:\n","        tic_tac_toe.winner = 'F'\n","        print('quiting the game')\n","        break\n","\n","      move = int(move)\n","      if tic_tac_toe.board[move] != ' ':\n","        while True:\n","          move = input(\"{}, that position is already taken! \"\\\n","                      \"What's your move?\".format(player))  \n","          move = int(move)            \n","          if tic_tac_toe.board[move] != ' ':\n","            continue\n","          else:\n","            break\n","            \n","      tic_tac_toe.board[move] = player\n","\n","      # the winner varaible will now be checked within the board object\n","      tic_tac_toe.check_winning()\n","      \n","      ##############################\n","      # CALL check_stalemate() BELOW\n","      ##############################\n","\n","      if tic_tac_toe.winner == '':\n","        clear_output()\n","        continue\n","\n","      ##########################################################################\n","      # write an elif statement that checks if self.winner is 'Stalemate' and\n","      # subsequently visualizes the board and breaks out of the while loop\n","      # also print out check_stalemante so the returned string is shown to the \n","      # user\n","      ##########################################################################\n","      else:\n","        print(tic_tac_toe.check_winning())\n","        tic_tac_toe.visualize_board()\n","        break\n","    if tic_tac_toe.winner != '':\n","      break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T9_zOzGefzJ4"},"source":["Let's test our new module"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W35vmcd5NEtR","executionInfo":{"status":"ok","timestamp":1624307185040,"user_tz":300,"elapsed":10685,"user":{"displayName":"Wesley Beckner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gis2tewog0nYcz7REtNxkAs58_fKdVn5wvb3mXkPQ=s64","userId":"17051665784581118920"}},"outputId":"fb13fa0d-07ce-4fc1-e294-9e1b462533a5"},"source":["play_game()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["|X|O|X|\n","|O|O|X|\n","|X| |O|\n","\n","X, what's your move?8\n","It's a stalemate!\n","|X|O|X|\n","|O|O|X|\n","|X|X|O|\n","\n"],"name":"stdout"}]}]}